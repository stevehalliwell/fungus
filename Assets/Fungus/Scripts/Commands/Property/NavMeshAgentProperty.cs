/*This script has been, partially or completely, generated by the Fungus.GenerateVariableWindow*/
using UnityEngine;


namespace Fungus
{
    // <summary>
    /// Get or Set a property of a NavMeshAgent component
    /// </summary>
    [CommandInfo("NavMeshAgent",
                 "Property",
                 "Get or Set a property of a NavMeshAgent component")]
    [AddComponentMenu("")]
    public class NavMeshAgentProperty : BaseVariableProperty
    {
		//generated property
        public enum Property 
        { 
            Destination, 
            StoppingDistance, 
            Velocity, 
            NextPosition, 
            SteeringTarget, 
            DesiredVelocity, 
            RemainingDistance, 
            BaseOffset, 
            IsOnOffMeshLink, 
            AutoTraverseOffMeshLink, 
            AutoBraking, 
            AutoRepath, 
            HasPath, 
            PathPending, 
            IsPathStale, 
            PathEndPosition, 
            IsStopped, 
            AgentTypeID, 
            AreaMask, 
            Speed, 
            AngularSpeed, 
            Acceleration, 
            UpdatePosition, 
            UpdateRotation, 
            UpdateUpAxis, 
            Radius, 
            Height, 
            AvoidancePriority, 
            IsOnNavMesh, 
        }

		
        [SerializeField]
        protected Property property;
		
        [SerializeField]
        protected NavMeshAgentData navMeshAgentData;

        [SerializeField]
        [VariableProperty(typeof(Vector3Variable),
                          typeof(FloatVariable),
                          typeof(BooleanVariable),
                          typeof(IntegerVariable))]
        protected Variable inOutVar;

        public override void OnEnter()
        {
            var iov = inOutVar as Vector3Variable;
            var iof = inOutVar as FloatVariable;
            var iob = inOutVar as BooleanVariable;
            var ioi = inOutVar as IntegerVariable;


            var target = navMeshAgentData.Value;

            switch (getOrSet)
            {
                case GetSet.Get:
                    switch (property)
                    {
                        case Property.Destination:
                            iov.Value = target.destination;
                            break;
                        case Property.StoppingDistance:
                            iof.Value = target.stoppingDistance;
                            break;
                        case Property.Velocity:
                            iov.Value = target.velocity;
                            break;
                        case Property.NextPosition:
                            iov.Value = target.nextPosition;
                            break;
                        case Property.SteeringTarget:
                            iov.Value = target.steeringTarget;
                            break;
                        case Property.DesiredVelocity:
                            iov.Value = target.desiredVelocity;
                            break;
                        case Property.RemainingDistance:
                            iof.Value = target.remainingDistance;
                            break;
                        case Property.BaseOffset:
                            iof.Value = target.baseOffset;
                            break;
                        case Property.IsOnOffMeshLink:
                            iob.Value = target.isOnOffMeshLink;
                            break;
                        case Property.AutoTraverseOffMeshLink:
                            iob.Value = target.autoTraverseOffMeshLink;
                            break;
                        case Property.AutoBraking:
                            iob.Value = target.autoBraking;
                            break;
                        case Property.AutoRepath:
                            iob.Value = target.autoRepath;
                            break;
                        case Property.HasPath:
                            iob.Value = target.hasPath;
                            break;
                        case Property.PathPending:
                            iob.Value = target.pathPending;
                            break;
                        case Property.IsPathStale:
                            iob.Value = target.isPathStale;
                            break;
                        case Property.PathEndPosition:
                            iov.Value = target.pathEndPosition;
                            break;
                        case Property.IsStopped:
                            iob.Value = target.isStopped;
                            break;
                        case Property.AgentTypeID:
                            ioi.Value = target.agentTypeID;
                            break;
                        case Property.AreaMask:
                            ioi.Value = target.areaMask;
                            break;
                        case Property.Speed:
                            iof.Value = target.speed;
                            break;
                        case Property.AngularSpeed:
                            iof.Value = target.angularSpeed;
                            break;
                        case Property.Acceleration:
                            iof.Value = target.acceleration;
                            break;
                        case Property.UpdatePosition:
                            iob.Value = target.updatePosition;
                            break;
                        case Property.UpdateRotation:
                            iob.Value = target.updateRotation;
                            break;
                        case Property.UpdateUpAxis:
                            iob.Value = target.updateUpAxis;
                            break;
                        case Property.Radius:
                            iof.Value = target.radius;
                            break;
                        case Property.Height:
                            iof.Value = target.height;
                            break;
                        case Property.AvoidancePriority:
                            ioi.Value = target.avoidancePriority;
                            break;
                        case Property.IsOnNavMesh:
                            iob.Value = target.isOnNavMesh;
                            break;
                        default:
                            Debug.Log("Unsupported get or set attempted");
                            break;
                    }

                    break;
                case GetSet.Set:
                    switch (property)
                    {
                        case Property.Destination:
                            target.destination = iov.Value;
                            break;
                        case Property.StoppingDistance:
                            target.stoppingDistance = iof.Value;
                            break;
                        case Property.Velocity:
                            target.velocity = iov.Value;
                            break;
                        case Property.NextPosition:
                            target.nextPosition = iov.Value;
                            break;
                        case Property.BaseOffset:
                            target.baseOffset = iof.Value;
                            break;
                        case Property.AutoTraverseOffMeshLink:
                            target.autoTraverseOffMeshLink = iob.Value;
                            break;
                        case Property.AutoBraking:
                            target.autoBraking = iob.Value;
                            break;
                        case Property.AutoRepath:
                            target.autoRepath = iob.Value;
                            break;
                        case Property.IsStopped:
                            target.isStopped = iob.Value;
                            break;
                        case Property.AgentTypeID:
                            target.agentTypeID = ioi.Value;
                            break;
                        case Property.AreaMask:
                            target.areaMask = ioi.Value;
                            break;
                        case Property.Speed:
                            target.speed = iof.Value;
                            break;
                        case Property.AngularSpeed:
                            target.angularSpeed = iof.Value;
                            break;
                        case Property.Acceleration:
                            target.acceleration = iof.Value;
                            break;
                        case Property.UpdatePosition:
                            target.updatePosition = iob.Value;
                            break;
                        case Property.UpdateRotation:
                            target.updateRotation = iob.Value;
                            break;
                        case Property.UpdateUpAxis:
                            target.updateUpAxis = iob.Value;
                            break;
                        case Property.Radius:
                            target.radius = iof.Value;
                            break;
                        case Property.Height:
                            target.height = iof.Value;
                            break;
                        case Property.AvoidancePriority:
                            target.avoidancePriority = ioi.Value;
                            break;
                        default:
                            Debug.Log("Unsupported get or set attempted");
                            break;
                    }

                    break;
                default:
                    break;
            }

            Continue();
        }

        public override string GetSummary()
        {
            if (navMeshAgentData.Value == null)
            {
                return "Error: no navMeshAgent set";
            }
            if (inOutVar == null)
            {
                return "Error: no variable set to push or pull data to or from";
            }

            return getOrSet.ToString() + " " + property.ToString();
        }

        public override Color GetButtonColor()
        {
            return new Color32(235, 191, 217, 255);
        }

        public override bool HasReference(Variable variable)
        {
            if (navMeshAgentData.navMeshAgentRef == variable || inOutVar == variable)
                return true;

            return false;
        }

    }
}