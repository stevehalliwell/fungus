/*This script has been, partially or completely, generated by the Fungus.GenerateVariableWindow*/
using UnityEngine;


namespace Fungus
{
    /// <summary>
    /// Vector4 variable type.
    /// </summary>
    [VariableInfo("Other", "Vector4", HasCustomDraw = true)]
    [AddComponentMenu("")]
	[System.Serializable]
	public class Vector4Variable : VariableBase<UnityEngine.Vector4>
	{
#if UNITY_EDITOR
        public override void InternalDrawProperty(Rect rect, UnityEditor.SerializedProperty valueProp)
        {
            valueProp.vector4Value = UnityEditor.EditorGUI.Vector4Field(rect, new GUIContent(""), valueProp.vector4Value);
        }
#endif//UNITY_EDITOR
    }

    /// <summary>
    /// Container for a Vector4 variable reference or constant value.
    /// </summary>
    [System.Serializable]
	public struct Vector4Data
	{
		[SerializeField]
		[VariableProperty("<Value>", typeof(Vector4Variable))]
		public Vector4Variable vector4Ref;

		[SerializeField]
		public UnityEngine.Vector4 vector4Val;

		public static implicit operator UnityEngine.Vector4(Vector4Data Vector4Data)
		{
			return Vector4Data.Value;
		}

		public Vector4Data(UnityEngine.Vector4 v)
		{
			vector4Val = v;
			vector4Ref = null;
		}

		public UnityEngine.Vector4 Value
		{
			get { return (vector4Ref == null) ? vector4Val : vector4Ref.Value; }
			set { if (vector4Ref == null) { vector4Val = value; } else { vector4Ref.Value = value; } }
		}

		public string GetDescription()
		{
			if (vector4Ref == null)
			{
				return vector4Val.ToString();
			}
			else
			{
				return vector4Ref.Key;
			}
		}
	}
}